@STRING{lncs	= "Lecture Notes in Computer Science" }

@InCollection{	  brucker.ea:symbolic:2005,
  abstract	= {We present a method for the automatic generation of test
		  cases for HOL formulae containing primitive recursive
		  predicates. These test cases can be used for the animation
		  of specifications as well as for black-box testing of
		  external programs. Our method is two-staged: first, the
		  original formula is partitioned into test cases by
		  transformation into a Horn-clause normal form (HCNF).
		  Second, the test cases are analyzed for instances with
		  constant terms satisfying the premises of the clauses.
		  Particular emphasis is put on the control of test
		  hypotheses and test hierarchies to avoid intractability. We
		  applied our method to several examples, including AVL-trees
		  and the red-black tree implementation in the standard
		  library from SML/NJ. },
  keywords	= {symbolic test case generations, black box testing, theorem
		  proving, Isabelle/HOL },
  address	= {Linz},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Formal Approaches to Testing of Software},
  copyright	= {\copyright Springer-Verlag},
  copyrighturl	= {http://link.springer-ny.com/link/service/series/0558/},
  language	= {USenglish},
  pages		= {16--32},
  publisher	= {Springer-Verlag},
  series	= lncs,
  number	= 3395,
  isbn		= {3-540-25109-X},
  doi		= {10.1007/b106767},
  editor	= {Jens Grabowski and Brian Nielsen},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-symbolic-2005},
  title		= {Symbolic Test Case Generation for Primitive Recursive
		  Functions},
  classification= {workshop},
  year		= 2005
}

@TechReport{	  north:automatic:1990,
  author	= {N. D. North},
  title		= {Automatic Test Generation for the Triangle Problem},
  type		= {Technical Report},
  number	= {DITC 161/90},
  institution	= {National Physical Laboratory},
  address	= {Teddington, Middlesex TW11 0LW, UK},
  month		= feb,
  year		= 1990
}

@InProceedings{	  dick.ea:testing:1993,
  bibkey	= {dick.ea:testing:1993},
  author	= {Jeremy Dick and Alain Faivre},
  title		= {Automating the Generation and Sequencing of Test Cases
		  from Model-Based Specications},
  pages		= {268--284},
  booktitle	= {Formal Methods Europe 93: Industrial-Strength Formal
		  Methods},
  editor	= {J.C.P. Woodcock and P.G. Larsen},
  month		= apr,
  year		= 1993,
  volume	= 670,
  series	= {LNCS},
  publisher	= {Springer}
}

@Book{		  nipkow.ea:isabelle:2002,
  author	= {Tobias Nipkow and Lawrence C. Paulson and Markus Wenzel},
  title		= {Isabelle/HOL --- A Proof Assistant for Higher-Order
		  Logic},
  publisher	= {Springer},
  series	= {LNCS},
  volume	= 2283,
  abstract	= {This book is a self-contained introduction to interactive
		  proof in higher-order logic (HOL), using the proof
		  assistant Isabelle2002. It is a tutorial for potential
		  users rather than a monograph for researchers. The book has
		  three parts.
		  
		  1. Elementary Techniques shows how to model functional
		  programs in higher-order logic. Early examples involve
		  lists and the natural numbers. Most proofs are two steps
		  long, consisting of induction on a chosen variable followed
		  by the auto tactic. But even this elementary part covers
		  such advanced topics as nested and mutual recursion. 2.
		  Logic and Sets presents a collection of lower-level tactics
		  that you can use to apply rules selectively. It also
		  describes Isabelle/HOL's treatment of sets, functions and
		  relations and explains how to define sets inductively. One
		  of the examples concerns the theory of model checking, and
		  another is drawn from a classic textbook on formal
		  languages. 3. Advanced Material describes a variety of
		  other topics. Among these are the real numbers, records and
		  overloading. Advanced techniques are described involving
		  induction and recursion. A whole chapter is devoted to an
		  extended example: the verification of a security protocol.
		  },
  url		= {http://www4.in.tum.de/~nipkow/LNCS2283/},
  year		= 2002
}

@Article{	  church:types:1940,
  author	= {Church, Alonzo},
  title		= {A formulation of the simple theory of types},
  journal	= {Journal of Symbolic Logic},
  year		= 1940,
  volume	= 5,
  pages		= {56--68}
}

@Book{		  andrews:introduction:1986,
  author	= {Peter B. Andrews},
  title		= {An Introduction to Mathematical Logic and Type Theory: To
		  Truth Through Proof},
  year		= 1986,
  month		= may,
  publisher	= {Academic Press},
  isbn		= 0120585367,
  series	= {Computer Science and Applied Mathematics},
  address	= {Orlando}
}

@Manual{	  wenzel:isabelleisar:2004,
  author	= {Markus Wenzel},
  title		= {The {Isabelle/Isar} Reference Manual},
  organization	= {TU M\"unchen},
  year		= 2004,
  url		= {http://isabelle.in.tum.de/dist/Isabelle2004/doc/isar-ref.pdf},
  address	= {M\"unchen}
}

@Book{		  dahl.ea:structured:1972,
  author	= {O.-J. Dahl and E. W. Dijkstra and C. A. R. Hoare},
  title		= {Structured Programming},
  publisher	= {Academic Press},
  year		= 1972,
  myedition	= {3rd},
  volume	= 8,
  series	= {A.P.I.C. Studies in Data Processing},
  address	= {London},
  isbn		= {0-12-200550-3}
}

@InCollection{	  biere.ea:bounded:2003,
  author	= {Biere, A. and Cimatti, A. and Clarke, Edmund and
		  Strichman, Ofer and Zhu, Y.},
  title		= {Bounded Model Checking},
  year		= 2003,
  booktitle	= {Advances In Computers},
  pdf		= {papers/2003/BiereCimattiClarkeStrichmanZhu-Advances-58-2003-preprint.pdf},
  volume	= 58,
  publisher	= {Academic Press},
  editor	= {Marvin Zelkowitz}
}

@InProceedings{	  cousot.ea:abstract:1977,
  author	= {Patrick Cousot and Radhia Cousot},
  title		= {Abstract interpretation: a unified lattice model for
		  static analysis of programs by construction or
		  approximation of fixpoints},
  booktitle	= {Proceedings of the 4th ACM SIGACT-SIGPLAN symposium on
		  Principles of programming languages},
  year		= 1977,
  pages		= {238--252},
  location	= {Los Angeles, California},
  doi		= {http://doi.acm.org/10.1145/512950.512973},
  publisher	= {ACM Press},
  pdf		= {papers/1977/p238-cousot.pdf}
}

@Article{	  zhu.ea:software:29-4,
  title		= {Software Unit Test Coverage and Adequacy},
  author	= {Hong Zhu and Patrick A.V. Hall and John H. R. May},
  journal	= {ACM Computing Surveys},
  issn		= {0360-0300},
  volume	= 29,
  number	= 4,
  language	= {USenglish},
  pages		= {366--427},
  keywords	= {Safety_Critical_Systems},
  year		= 1997,
  abstract	= {Objective measurement of test quality is one of the key
		  issues in software testing. It has been a major research
		  focus for the last two decades. Many test criteria have
		  been proposed and studied for this purpose. Various kinds
		  of rationale have been presented in support of one
		  criterion or another. This paper surveys the research work
		  in this area. The notion of adequacy criteria is examined
		  together with its role in software dynamic testing. A
		  review of criteria classification is followed by a summary
		  of the methods for comparison and assessment of criteria.}
}

@InCollection{	  gaudel:testing:1995,
  author	= {Marie-Claude Gaudel},
  title		= {Testing can be formal, too},
  year		= 1995,
  booktitle	= {TAPSOFT 95},
  isbn		= {3-540-59293-8},
  address	= {Aarhus, Denmark},
  paddress	= {Heidelberg, Germany},
  pages		= {82--96},
  publisher	= {Springer-Verlag},
  series	= lncs,
  volume	= 915,
  editor	= {Peter D. Mosses and Mogens Nielsen and Michael I.
		  Schwartzbach}
}

@Article{	  hayashi:towards:2002,
  author	= {Susumu Hayashi},
  title		= {Towards the Animation of Proofs---Testing Proofs by
		  Examples},
  journal	= {Theoretical Computer Science},
  volume	= 272,
  number	= {1--2},
  special	= {Selected Papers TTP-Tokyo'97},
  pages		= {177--195},
  year		= 2002
}

@Misc{		  smlnj,
  title		= {{SML} of {New} {Jersey}},
  url		= {http://www.smlnj.org/},
  key		= {smlnj},
  optnote	= {\url{http://www.smlnj.org/}}
}

@Misc{		  polyml,
  title		= {{Poly/ML} -- The Poly/ML implementation of Standard ML.},
  key		= {polyml},
  url		= {http://www.polyml.org/},
  year		= {2016}
}

@Misc{		  sml.net,
  title		= {{sml.net}},
  key		= {{sml.net}},
  url		= {http://www.cl.cam.ac.uk/Research/TSG/SMLNET/}
}

@Misc{		  mlj,
  title		= {{MLj}},
  key		= {mlj},
  url		= {http://www.dcs.ed.ac.uk/home/mlj/index.html}
}

@Misc{		  mlton,
  title		= {{MLton}},
  key		= {mlton},
  abstract	= {MLton is an open-source, whole-program, optimizing
		  Standard ML compiler.},
  url		= {http://www.mlton.org/},
  year		= {2016}
}

@Misc{		  isabelle,
  title		= {{The Isabelle Home Page}},
  key		= {isabelle},
  year		= {2016},
  url		= {http://isabelle.in.tum.de}
}

@Misc{		  afp,
  title		= {The Archive of Formal Proofs {(AFP)}},
  key		= {afp},
  url		= {http://afp.sourceforge.net/},
  year		= {2016}
}

@Misc{		  proofgeneral,
  title		= {{Proof General}},
  key		= {proof general},
  url		= {http://proofgeneral.inf.ed.ac.uk}
}

@InProceedings{	  claessen.ea:quickcheck:2000,
  author	= {Koen Claessen and John Hughes},
  title		= {{QuickCheck}: a lightweight tool for random testing of
		  {Haskell} programs},
  booktitle	= {Proceedings of the fifth ACM SIGPLAN international
		  conference on Functional programming},
  year		= 2000,
  isbn		= {1-58113-202-6},
  pages		= {268--279},
  publisher	= {ACM Press},
  pdf		= {papers/2000/p268-claessen.pdf},
  abstract	= { Quick Check is a tool which aids the Haskell programmer
		  in formulating and testing properties of programs.
		  Properties are described as Haskell functions, and can be
		  automatically tested on random input, but it is also
		  possible to define custom test data generators. We present
		  a number of case studies, in which the tool was
		  successfully used, and also point out some pitfalls to
		  avoid. Random testing is especially suitable for functional
		  programs because properties can be stated at a fine grain.
		  When a function is built from separately tested components,
		  then random testing suffices to obtain good coverage of the
		  definition under test. }
}

@InProceedings{	  berghofer.ea:random:2004,
  abstract	= {When developing non-trivial formalizations in a theorem
		  prover, a considerable amount of time is devoted to
		  ``debugging'' specifications and conjectures by failed
		  proof attempts. To detect such problems early in the proof
		  and save development time, we have extended the Isabelle
		  theorem prover with a tool for testing specifications by
		  evaluating propositions under an assignment of random
		  values to free variables. Distribution of the test data is
		  optimized via mutation testing. The technical contributions
		  are an extension of earlier work with inductive definitions
		  and a generic method for randomly generating elements of
		  recursive datatypes.},
  author	= {Stefan Berghofer and Tobias Nipkow},
  title		= {Random Testing in {Isabelle/HOL}},
  booktitle	= {Software Engineering and Formal Methods (SEFM 2004)},
  editor	= {J. Cuellar and Z. Liu},
  year		= 2004,
  pages		= {230--239},
  publisher	= {IEEE Computer Society}
}

@Article{	  brucker.ea:verification:2005,
  author	= {Achim D. Brucker and Burkhart Wolff},
  title		= {A Verification Approach for Applied System Security},
  journal	= {International Journal on Software Tools for Technology
		  Transfer (STTT)},
  year		= 2005,
  publisher	= {Springer Verlag, Heidelberg},
  pdf		= {http://www.brucker.ch/bibliography/download/2005/brucker.ea-verification-2005.pdf},
  ps		= {http://www.brucker.ch/bibliography/download/2005/brucker.ea-verification-2005.ps.gz},
  language	= {USenglish},
  keywords	= {verification, security, access control, refinement, POSIX,
		  CVS, Z },
  copyright	= {\copyright Springer-Verlag},
  copyrighturl	= {http://www.springeronline.com/sgw/cda/frontpage/0,11855,1-40109-70-1119401-0,00.html},
  classification= {journal},
  issn		= {1433-2779},
  doi		= {10.1007/s10009-004-0176-3},
  abstract	= {We present a method for the security analysis of realistic
		  models over off-the-shelf systems and their configuration
		  by formal, machine-checked proofs. The presentation follows
		  a large case study based on a formal security analysis of a
		  CVS-Server architecture.
		  
		  The analysis is based on an abstract architecture
		  (enforcing a role-based access control), which is refined
		  to an implementation architecture (based on the usual
		  discretionary access control provided by the \posix{}
		  environment). Both architectures serve as a skeleton to
		  formulate access control and confidentiality properties.
		  
		  Both the abstract and the implementation architecture are
		  specified in the language Z. Based on a logical embedding
		  of Z into Isabelle/HOL, we provide formal, machine-checked
		  proofs for consistency properties of the specification, for
		  the correctness of the refinement, and for security
		  properties.},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-verification-2005}
}

@InProceedings{	  dybjer.ea:combining:2003,
  author	= {Peter Dybjer and Qiao Haiyan and Makoto Takeyama},
  title		= {Verifying Haskell Programs by Combining Testing and
		  Proving},
  booktitle	= {Proceedings of the Third International Conference on
		  Quality Software},
  year		= 2003,
  isbn		= {0-7695-2015-4},
  pages		= 272,
  url		= {http://csdl.computer.org/comp/proceedings/qsic/2003/2015/00/20150272abs.htm},
  pdf		= {papers/2003/qsic03.pdf},
  abstract	= {We propose a method for improving confidence in the
		  correctness of Haskell programs by combining testing and
		  proving. Testing is used for debugging programs and
		  specification before a costly proof attempt. During a proof
		  development, testing also quickly eliminates wrong
		  conjectures. Proving helps us to decompose a testing task
		  in a way that is guaranteed to be correct. To demonstrate
		  the method we have extended the Agda/Alfa proof assistant
		  for dependent type theory with a tool for random testing.
		  As an example we show how the correctness of a
		  BDD-algorithm written in Haskell is verified by testing
		  properties of component functions. We also discuss faithful
		  translations from Haskell to type theory.},
  publisher	= {IEEE Computer Society}
}

@InCollection{	  brucker.ea:test-sequence:2007,
  abstract	= {HOL-TestGen is a specification and test-case generation
		  environment extending the interactive theorem prover
		  Isabelle/HOL. Its method is two-staged: first, the original
		  formula is partitioned into test cases by transformation
		  into a normal form. Second, the test cases are analyzed for
		  ground instances (the test data) satisfying the constraints
		  of the test cases. Particular emphasis is put on the
		  control of explicit test hypotheses which can be proven
		  over concrete programs.
		  
		  Although originally designed for black-box unit-tests,
		  HOL-TestGen's underlying logic and deduction engine is
		  powerful enough to be used in test-sequence generation,
		  too.
		  
		  We develop the theory for test-sequence generation with
		  HOL-TestGen and describe its use in a substantial
		  case-study in the field of computer security, namely the
		  black-box test of configured firewalls. },
  keywords	= {security, model-based testing, specification-based
		  testing, firewall testing},
  paddress	= {Heidelberg},
  address	= {Zurich},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {{TAP} 2007: Tests And Proofs},
  copyright	= {\copyright Springer-Verlag},
  copyrighturl	= {http://link.springer-ny.com/link/service/series/0558/},
  language	= {USenglish},
  publisher	= {Springer-Verlag},
  series	= lncs,
  number	= 4454,
  editor	= {Bertrand Meyer and Yuri Gurevich},
  project	= {CSFMDOS},
  title		= {Test-Sequence Generation with {HOL-TestGen} -- With an
		  Application to Firewall Testing },
  categories	= {holtestgen},
  classification= {conference},
  public	= {yes},
  year		= 2007,
  doi		= {10.1007/978-3-540-73770-4_9},
  pages		= {149--168},
  isbn		= {978-3-540-73769-8},
  pdf		= {download/2007/brucker.ea-test-sequence-2007.pdf},
  ps		= {download/2007/brucker.ea-test-sequence-2007.ps.gz}
}

@InCollection{	  brucker.ea:model-based:2008,
  abstract	= {Firewalls are a cornerstone of todays security
		  infrastructure for networks. Their configuration,
		  implementing a firewall policy, is inherently complex, hard
		  to understand, and difficult to validate.
		  
		  We present a substantial case study performed with the
		  model-based testing tool HOL-TestGen. Based on a formal
		  model of firewalls and their policies in HOL, we first
		  present a derived theory for simplifying policies. We
		  discuss different test plans for test specifications.
		  Finally, we show how to integrate these issues to a
		  domain-specific firewall testing tool HOL-TestGen/FW.},
  paddress	= {Heidelberg},
  editor	= {Kenji Suzuki and Teruo Higashino},
  address	= {Tokyo, Japan},
  author	= {Achim D. Brucker and Lukas Br{\"u}gger and Burkhart Wolff},
  booktitle	= {Testcom/FATES 2008},
  copyright	= {\copyright Springer-Verlag},
  copyrighturl	= {http://link.springer-ny.com/link/service/series/0558/},
  language	= {USenglish},
  publisher	= {Springer-Verlag},
  series	= lncs,
  number	= 5047,
  doi		= {10.1007/978-3-540-68524-1_9},
  pages		= {103--118},
  title		= {Model-based Firewall Conformance Testing},
  categories	= {holtestgen},
  classification= {conference},
  year		= 2008,
  pdf		= {download/2008/brucker.ea-model-based-2008.pdf},
  ps		= {download/2008/brucker.ea-model-based-2008.ps.gz},
  public	= {yes}
}

@InProceedings{	  senn.ea:firewall:2005,
  abstract	= {Firewalls are widely used to protect networks from
		  unauthorised access. To ensure that they implement an
		  organisation's security policy correctly, they need to be
		  tested. We present an approach that addresses this problem.
		  Namely, we show how an organisation's network security
		  policy can be formally specified in a high-level way, and
		  how this specification can be used to automatically
		  generate test cases to test a deployed system. In contrast
		  to other firewall testing methodologies, such as
		  penetration testing, our approach tests conformance to a
		  specified policy. Our test cases are organisation-specific
		  --- i.e.~they depend on the security requirements and on
		  the network topology ofan organisation --- and can uncover
		  errors both in the firewall products themselves and in
		  their configuration.},
  author	= {Diana Senn and David Basin and Germano Caronni},
  booktitle	= {TestCom 2005},
  editor	= {Ferhat Khendek and Rachida Dssouli},
  language	= {UKenglish},
  month		= {May},
  pages		= {226--241},
  publisher	= pub-springer,
  series	= lncs,
  title		= {Firewall Conformance Testing},
  volume	= 3502,
  year		= 2005,
  acknowledgement={none}
}

@PhDThesis{	  bidder:specification:2007,
  author	= {Diana von Bidder},
  title		= {Specification-based Firewall Testing},
  school	= {ETH Zurich},
  year		= 2007,
  public	= {yes},
  type		= {{Ph.D. Thesis}},
  classification= {thesis},
  categories	= {holocl},
  note		= {ETH Diss. No. 17172. Diana von Bidder's maiden name is
		  Diana Senn.}
}

@Article{	  brucker.ea:theorem-prover:2012,
  author	= {Achim D. Brucker and Burkhart Wolff},
  journal	= {Formal Aspects of Computing},
  publisher	= {Springer-Verlag},
  address	= {Heidelberg},
  language	= {USenglish},
  categories	= {holtestgen},
  title		= {On Theorem Prover-based Testing},
  year		= 2012,
  issn		= {0934-5043},
  classification= journal,
  areas		= {formal methods, software},
  public	= {yes},
  doi		= {10.1007/s00165-012-0222-y},
  keywords	= {test case generation, domain partitioning, test sequence,
		  theorem proving, HOL-TestGen},
  abstract	= {HOL-TestGen is a specification and test case generation
		  environment extending the interactive theorem prover
		  Isabelle/HOL. As such, HOL-TestGen allows for an integrated
		  workflow supporting interactive theorem proving, test case
		  generation, and test data generation.
		  
		  The HOL-TestGen method is two-staged: first, the original
		  formula is partitioned into test cases by transformation
		  into a normal form called test theorem. Second, the test
		  cases are analyzed for ground instances (the test data)
		  satisfying the constraints of the test cases. Particular
		  emphasis is put on the control of explicit test-hypotheses
		  which can be proven over concrete programs.
		  
		  Due to the generality of the underlying framework, our
		  system can be used for black-box unit, sequence, reactive
		  sequence and white-box test scenarios. Although based on
		  particularly clean theoretical foundations, the system can
		  be applied for substantial case-studies. },
  pdf		= {http://www.brucker.ch/bibliography/download/2012/brucker.ea-theorem-prover-2012.pdf},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-theorem-prover-2012}
}

@InCollection{	  brucker.ea:hol-testgen:2009,
  abstract	= {We present HOL-TestGen, an extensible test environment for
		  specification-based testing build upon the proof assistant
		  Isabelle. HOL-TestGen leverages the semi-automated
		  generation of test theorems (a form of a partition), and
		  their refinement to concrete test data, as well as the
		  automatic generation of a test driver for the execution and
		  test result verification.\\\\HOL-TestGen can also be
		  understood as a unifying technical and conceptual framework
		  for presenting and investigating the variety of unit and
		  sequence test techniques in a logically consistent way.},
  address	= {Heidelberg},
  author	= {Achim D. Brucker and Burkhart Wolff},
  booktitle	= {Fundamental Approaches to Software Engineering
		  {(FASE09)}},
  doi		= {10.1007/978-3-642-00593-0_28},
  editor	= {Marsha Chechik and Martin Wirsing},
  keywords	= {symbolic test case generations, black box testing, white
		  box testing, theorem proving, interactive testing},
  language	= {USenglish},
  location	= {York, UK},
  number	= 5503,
  pages		= {417--420},
  pdf		= {http://www.brucker.ch/bibliography/download/2009/brucker.ea-hol-testgen-2009.pdf},
  publisher	= {Springer-Verlag},
  series	= {Lecture Notes in Computer Science},
  title		= {{HOL-TestGen}: An Interactive Test-case Generation
		  Framework},
  url		= {http://www.brucker.ch/bibliography/abstract/brucker.ea-hol-testgen-2009},
  year		= 2009
}

@InProceedings{	  DBLP:conf/vstte/BruckerHNW15,
  author	= {Achim D. Brucker and Oto Havle and Yakoub Nemouchi and
		  Burkhart Wolff},
  title		= {Testing the {IPC} Protocol for a Real-Time Operating
		  System},
  booktitle	= {Verified Software: Theories, Tools, and Experiments - 7th
		  International Conference, {VSTTE} 2015, San Francisco, CA,
		  USA, July 18-19, 2015. Revised Selected Papers},
  pages		= {40--60},
  year		= 2015,
  url		= {http://dx.doi.org/10.1007/978-3-319-29613-5_3},
  doi		= {10.1007/978-3-319-29613-5_3},
  timestamp	= {Fri, 12 Feb 2016 10:43:40 +0100},
  biburl	= {http://dblp.uni-trier.de/rec/bib/conf/vstte/BruckerHNW15},
  bibsource	= {dblp computer science bibliography, http://dblp.org}
}

@InProceedings{	  bohme:fast:2010,
  author	= {Sascha B{\"{o}}hme and Tjark Weber},
  title		= {Fast LCF-Style Proof Reconstruction for {Z3}},
  booktitle	= {Interactive Theorem Proving (ITP)},
  pages		= {179--194},
  year		= 2010,
  url		= {http://dx.doi.org/10.1007/978-3-642-14052-5_14},
  doi		= {10.1007/978-3-642-14052-5_14},
  editor	= {Matt Kaufmann and Lawrence C. Paulson},
  series	= {Lecture Notes in Computer Science},
  volume	= 6172,
  publisher	= {Springer},
  isbn		= {978-3-642-14051-8}
}
