(*****************************************************************************
 * HOL-TestGen --- theorem-prover based test case generation
 *                 http://www.brucker.ch/projects/hol-testgen/
 *                                                                            
 * This file is part of HOL-TestGen.
 *
 * Copyright (c) 2011 Achim D. Brucker, Germany
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     * Neither the name of the copyright holders nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************)
(* $Id: SequenceScript.fs 9071 2011-01-05 00:53:17Z brucker $ *)

namespace SequenceExample

(*******************************************************************
 *                         Test-Driver 
 *           generated by HOL-TestGen 1.5.0-pre (alpha: 8882)
 *******************************************************************)
(* Manually translated from SML to F#                              *) 
 
 module TestDriver = 
    type data = Data
    // type 'a option = None | Some of 'a

    let valid sigma m = match m sigma with 
                        | None   -> false 
                        | Some x -> match x with 
                                    | (x, xa) -> x


    let bind_SE f g = (fun sigma -> (match f sigma with None -> None | Some x -> (match x with (x, xa) -> g x xa)))

    let rec mbind l iostep sigma = match (l,iostep,sigma) with
                                   | ([],iostep,sigma)       -> Some ([], sigma)
                                   | ((a :: h),iostep,sigma) -> match iostep a sigma with
                                                                | None   -> Some ([], sigma)
                                                                | Some x -> match x with
                                                                            | (x, xa) -> match mbind h iostep xa with
                                                                                         | None    -> Some ([x], xa)
                                                                                         | Some xb -> match xb with
                                                                                                      | (xa, xb) -> Some ((x::xa), xb)

    let observer2 rebind substitute postcond ioprog = (fun in_a -> (fun (sigma_obs, sigma) -> let in_c = substitute sigma_obs in_a
                                                                                              (match ioprog in_c sigma with
                                                                                                                       |None -> None
                                                                                                                       | Some x -> (match x with
                                                                                                                                    | (x, xa) -> let sigma_obs' = rebind sigma_obs x
                                                                                                                                                 if postcond sigma_obs' xa in_c x
                                                                                                                                                 then Some (x, (sigma_obs', xa)) else None))))


    type InEvent_conc = Req of int | Send of data * int | Stop

    let the (Some b) = b
    
    let  lookup env v = the (env v)

    type OutEvent_conc = Port of int | Ack

    type vars = X | Y

    let postcond' = function
      | (env, (x, (Req n, Port m)))          -> (m <= n)
      | (env, (x, (Send (z, n), Ack)))       -> (n = lookup env Y)
      | (env, (x, (Stop, Ack)))              -> true
      | (env, (x, (Req aa, Ack)))            -> false
      | (env, (x, (Send (ab, ac), Port ai))) -> false
      | (env, (x, (Stop, Port ak)))          -> false

    let postcond env sigma y z = postcond' (env, (sigma, (y, z)))

    type InEvent_abs = ReqA of vars | SendA of data * vars | StopA

    let substitute env r = match (env,r) with
                           | (env, (ReqA v))       -> Req (lookup env v)
                           | (env, (SendA (d, v))) -> Send (d, lookup env v)
                           | (env, StopA)          -> Stop

    let let_upd f a b = (fun x -> (if (x = a) then b else f x));

    let rebind env r = match (env,r) with
                       | (env,(Port n)) -> let_upd env Y (Some n)
                       | (b,Ack)        -> b

    type unit = Unity


    let SendToServer event Unity = 
      let toServerData Data = SimpleServer.Data
      let toServerVars = function 
        | X    -> SimpleServer.X
        | Y    -> SimpleServer.Y
      let fromServerData SimpleServer.Data = Data
      let fromServerVars = function 
        | SimpleServer.X    -> X
        | SimpleServer.Y    -> Y
      let convert_InEvent = function 
        | (Req x)      -> SimpleServer.Req x
        | (Send (x,y)) -> SimpleServer.Send  (toServerData x,y)
        | Stop         -> SimpleServer.Stop 
      let convert_OutEvent = function 
        | (SimpleServer.Port x)  -> Some(Port x,Unity)
        | SimpleServer.Ack       -> Some(Ack,Unity)
      convert_OutEvent (SimpleServer.read (convert_InEvent event))

    let retlet () = None
    let toString a = ""



    let _ = System.Console.Write ("\nRunning Test Case 38:\n")
    let pre_38  = []
    let post_38 = fun () -> (valid ((fun a -> (if (a = X) then Some -6 else None)), Unity)
                                   (fun a -> bind_SE (fun a -> (match observer2 rebind substitute postcond SendToServer (ReqA X) a with
                                                                | None   -> Some ([], a)
                                                                | Some x -> (match x with
                                                                            |(x, xa) -> (match mbind [SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      StopA] (observer2 rebind substitute postcond SendToServer) xa with
                                                                                         | None    -> Some ([x], xa)
                                                                                         | Some xb -> (match xb with
                                                                                                       | (xa, xb) -> Some ((x :: xa), xb))))))
                                                     (fun os -> fun a -> Some (true, ((fun uu_ -> None), Unity))) a))

    let (res_38:((bool option * exn option) * (bool option * InEvent_abs option * exn option))) = HolTestGen.TestHarness.check retlet pre_38 post_38
    let testres_38 =  [res_38]


    let _ = System.Console.Write ("\nRunning Test Case 37:\n")
    let pre_37  = []
    let post_37 = fun () -> (valid ((fun a -> (if (a = X) then Some 2 else None)), Unity)
                                   (fun a -> bind_SE (fun a -> (match observer2 rebind substitute postcond SendToServer (ReqA X) a with
                                                                | None   -> Some ([], a)
                                                                | Some x -> (match x with
                                                                            |(x, xa) -> (match mbind [SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y) 
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      SendA (Data, Y)
                                                                                                      StopA] (observer2 rebind substitute postcond SendToServer) xa with
                                                                                         | None    -> Some ([x], xa)
                                                                                         | Some xb -> (match xb with
                                                                                                       | (xa, xb) -> Some ((x :: xa), xb))))))
                                                     (fun os -> fun a -> Some (true, ((fun uu_ -> None), Unity))) a))
    let res_37  = HolTestGen.TestHarness.check retlet pre_37 post_37
    let testres_37 =  testres_38@[res_37]

(*
let _ = System.Console.Write ("\nRunning Test Case 36:\n")
let pre_36  = [];
let post_36 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 7 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> Some ~7), Unity)))
       a));
let res_36  = HolTestGen.TestHarness.check retlet pre_36 post_36;
let testres = testres@[res_36];

let _ = System.Console.Write ("\nRunning Test Case 35:\n")
let pre_35  = [];
let post_35 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 10 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (true, ((fun uu_ -> Some ~10), Unity)))
       a));
let res_35  = HolTestGen.TestHarness.check retlet pre_35 post_35;
let testres = testres@[res_35];

let _ = System.Console.Write ("\nRunning Test Case 34:\n")
let pre_34  = [];
let post_34 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~9 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_34  = HolTestGen.TestHarness.check retlet pre_34 post_34;
let testres = testres@[res_34];

let _ = System.Console.Write ("\nRunning Test Case 33:\n")
let pre_33  = [];
let post_33 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 5 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_33  = HolTestGen.TestHarness.check retlet pre_33 post_33;
let testres = testres@[res_33];

let _ = System.Console.Write ("\nRunning Test Case 32:\n")
let pre_32  = [];
let post_32 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 8 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_32  = HolTestGen.TestHarness.check retlet pre_32 post_32;
let testres = testres@[res_32];

let _ = System.Console.Write ("\nRunning Test Case 31:\n")
let pre_31  = [];
let post_31 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~2 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> None), Unity)))
       a));
let res_31  = HolTestGen.TestHarness.check retlet pre_31 post_31;
let testres = testres@[res_31];

let _ = System.Console.Write ("\nRunning Test Case 30:\n")
let pre_30  = [];
let post_30 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~7 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_30  = HolTestGen.TestHarness.check retlet pre_30 post_30;
let testres = testres@[res_30];

let _ = System.Console.Write ("\nRunning Test Case 29:\n")
let pre_29  = [];
let post_29 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~6 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_29  = HolTestGen.TestHarness.check retlet pre_29 post_29;
let testres = testres@[res_29];

let _ = System.Console.Write ("\nRunning Test Case 28:\n")
let pre_28  = [];
let post_28 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 7 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> None), Unity)))
       a));
let res_28  = HolTestGen.TestHarness.check retlet pre_28 post_28;
let testres = testres@[res_28];

let _ = System.Console.Write ("\nRunning Test Case 27:\n")
let pre_27  = [];
let post_27 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 2 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_27  = HolTestGen.TestHarness.check retlet pre_27 post_27;
let testres = testres@[res_27];

let _ = System.Console.Write ("\nRunning Test Case 26:\n")
let pre_26  = [];
let post_26 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~3 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> None), Unity)))
       a));
let res_26  = HolTestGen.TestHarness.check retlet pre_26 post_26;
let testres = testres@[res_26];

let _ = System.Console.Write ("\nRunning Test Case 25:\n")
let pre_25  = [];
let post_25 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 7 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> Some 3), Unity)))
       a));
let res_25  = HolTestGen.TestHarness.check retlet pre_25 post_25;
let testres = testres@[res_25];

let _ = System.Console.Write ("\nRunning Test Case 24:\n")
let pre_24  = [];
let post_24 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~8 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_24  = HolTestGen.TestHarness.check retlet pre_24 post_24;
let testres = testres@[res_24];

let _ = System.Console.Write ("\nRunning Test Case 23:\n")
let pre_23  = [];
let post_23 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~9 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_23  = HolTestGen.TestHarness.check retlet pre_23 post_23;
let testres = testres@[res_23];

let _ = System.Console.Write ("\nRunning Test Case 22:\n")
let pre_22  = [];
let post_22 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~3 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_22  = HolTestGen.TestHarness.check retlet pre_22 post_22;
let testres = testres@[res_22];

let _ = System.Console.Write ("\nRunning Test Case 21:\n")
let pre_21  = [];
let post_21 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~9 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_21  = HolTestGen.TestHarness.check retlet pre_21 post_21;
let testres = testres@[res_21];

let _ = System.Console.Write ("\nRunning Test Case 20:\n")
let pre_20  = [];
let post_20 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~6 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> Some ~5), Unity)))
       a));
let res_20  = HolTestGen.TestHarness.check retlet pre_20 post_20;
let testres = testres@[res_20];

let _ = System.Console.Write ("\nRunning Test Case 19:\n")
let pre_19  = [];
let post_19 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~4 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> Some 0), Unity)))
       a));
let res_19  = HolTestGen.TestHarness.check retlet pre_19 post_19;
let testres = testres@[res_19];

let _ = System.Console.Write ("\nRunning Test Case 18:\n")
let pre_18  = [];
let post_18 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~3 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_18  = HolTestGen.TestHarness.check retlet pre_18 post_18;
let testres = testres@[res_18];

let _ = System.Console.Write ("\nRunning Test Case 17:\n")
let pre_17  = [];
let post_17 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 2 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (true, ((fun uu_ -> None), Unity)))
       a));
let res_17  = HolTestGen.TestHarness.check retlet pre_17 post_17;
let testres = testres@[res_17];

let _ = System.Console.Write ("\nRunning Test Case 16:\n")
let pre_16  = [];
let post_16 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 1 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> Some 2), Unity)))
       a));
let res_16  = HolTestGen.TestHarness.check retlet pre_16 post_16;
let testres = testres@[res_16];

let _ = System.Console.Write ("\nRunning Test Case 15:\n")
let pre_15  = [];
let post_15 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~10 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_15  = HolTestGen.TestHarness.check retlet pre_15 post_15;
let testres = testres@[res_15];

let _ = System.Console.Write ("\nRunning Test Case 14:\n")
let pre_14  = [];
let post_14 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~8 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (true, ((fun uu_ -> None), Unity)))
       a));
let res_14  = HolTestGen.TestHarness.check retlet pre_14 post_14;
let testres = testres@[res_14];

let _ = System.Console.Write ("\nRunning Test Case 13:\n")
let pre_13  = [];
let post_13 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 3 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> Some 5), Unity)))
       a));
let res_13  = HolTestGen.TestHarness.check retlet pre_13 post_13;
let testres = testres@[res_13];

let _ = System.Console.Write ("\nRunning Test Case 12:\n")
let pre_12  = [];
let post_12 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~7 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_12  = HolTestGen.TestHarness.check retlet pre_12 post_12;
let testres = testres@[res_12];

let _ = System.Console.Write ("\nRunning Test Case 11:\n")
let pre_11  = [];
let post_11 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 2 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_11  = HolTestGen.TestHarness.check retlet pre_11 post_11;
let testres = testres@[res_11];

let _ = System.Console.Write ("\nRunning Test Case 10:\n")
let pre_10  = [];
let post_10 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 0 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_10  = HolTestGen.TestHarness.check retlet pre_10 post_10;
let testres = testres@[res_10];

let _ = System.Console.Write ("\nRunning Test Case 9:\n")
let pre_9  = [];
let post_9 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 2 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> None), Unity)))
       a));
let res_9  = HolTestGen.TestHarness.check retlet pre_9 post_9;
let testres = testres@[res_9];

let _ = System.Console.Write ("\nRunning Test Case 8:\n")
let pre_8  = [];
let post_8 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 9 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> None), Unity)))
       a));
let res_8  = HolTestGen.TestHarness.check retlet pre_8 post_8;
let testres = testres@[res_8];

let _ = System.Console.Write ("\nRunning Test Case 7:\n")
let pre_7  = [];
let post_7 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 9 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> None), Unity)))
       a));
let res_7  = HolTestGen.TestHarness.check retlet pre_7 post_7;
let testres = testres@[res_7];

let _ = System.Console.Write ("\nRunning Test Case 6:\n")
let pre_6  = [];
let post_6 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 5 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_6  = HolTestGen.TestHarness.check retlet pre_6 post_6;
let testres = testres@[res_6];

let _ = System.Console.Write ("\nRunning Test Case 5:\n")
let pre_5  = [];
let post_5 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 9 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_5  = HolTestGen.TestHarness.check retlet pre_5 post_5;
let testres = testres@[res_5];

let _ = System.Console.Write ("\nRunning Test Case 4:\n")
let pre_4  = [];
let post_4 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 10 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> None), Unity)))
       a));
let res_4  = HolTestGen.TestHarness.check retlet pre_4 post_4;
let testres = testres@[res_4];

let _ = System.Console.Write ("\nRunning Test Case 3:\n")
let pre_3  = [];
let post_3 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~5 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (false, ((fun uu_ -> None), Unity)))
       a));
let res_3  = HolTestGen.TestHarness.check retlet pre_3 post_3;
let testres = testres@[res_3];

let _ = System.Console.Write ("\nRunning Test Case 2:\n")
let pre_2  = [];
let post_2 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~7 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind
                           [SendA (Data, Y),
SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (true, ((fun uu_ -> None), Unity)))
       a));
let res_2  = HolTestGen.TestHarness.check retlet pre_2 post_2;
let testres = testres@[res_2];

let _ = System.Console.Write ("\nRunning Test Case 1:\n")
let pre_1  = [];
let post_1 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some ~6 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind [SendA (Data, Y), StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a -> None) a));
let res_1  = HolTestGen.TestHarness.check retlet pre_1 post_1;
let testres = testres@[res_1];

let _ = System.Console.Write ("\nRunning Test Case 0:\n")
let pre_0  = [];
let post_0 = fun () -> ( valid
   ((fun a -> (if (a = X) then Some 2 else None)), Unity)
   (fun a ->
     bind_SE
       (fun a ->
         (case observer2 rebind substitute postcond
                 SendToServer (ReqA X) a of
           None -> Some ([], a)
           | Some x ->
               (case x of
                 (x, xa) ->
                   (case mbind [StopA]
                           (observer2 rebind substitute
postcond SendToServer)
                           xa of
                     None -> Some ([x], xa)
                     | Some xb ->
                         (case xb of
                           (xa, xb) ->
Some ((x :: xa), xb))))))
       (fun os -> fun a ->
         Some (true, ((fun uu_ -> Some 6), Unity)))
       a));
let res_0  = HolTestGen.TestHarness.check retlet pre_0 post_0;
let testres = testres@[res_0];
*)

    let testres = testres_37

    let _ =  HolTestGen.TestHarness.printList toString testres
